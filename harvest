#! /usr/bin/env bash
: <<=cut
=pod

=head1  NAME

rp_utils - Utilities to update the researher profiles

=head1 SYNOPSIS

rp_utils --configuration=<configuration> <command> <args>

where <command> is one of: drop

rp_utils is a script the performs some commands on an active configuration of
the research profiles. L</"COMMANDS"> is summary of the commands that are
available.

=head1 GLOBAL OPTIONS

=over 4

=item B<--configuration=<configuration>>

This is the particular configuation that you want to act on.

=back

=cut

function init() {
    local opts=`$GETOPT -o c:hv --long verbose,help,configuration: -n 'rp_utils' -- "$@"`
    if [ $? != 0 ] ; then echo "Bad Command Options." >&2 ; exit 1 ; fi

    eval set -- "$opts"

    while true; do
	    case $1 in
	      -c | --configuration) G[configuration]=$2;  shift 2;;
	      -v | --verbose) G[verbose]=1;  shift ;;
        -h | --help ) exec pod2text $0;;
	      -- ) shift; break;;
	      *) shift; break;
      esac
    done

}

: <<='cut'

=pod

=head1 COMMANDS

The current commands are: delete

=cut

function main.cmd () {
    cmd=$1
    shift;
    case $cmd in
	    drop ) # API requests
	      $cmd "$@";
	      ;;
	    *)
	      exec pod2usage $0
	  ;;
    esac
}

function log() {
  [[ -n ${G[verbose]} ]] && (>&2 echo LOG: $@)
}

function err() {
  local n=1;
  if [[ $1 = '--quiet' ]] ; then
    n=$2;
  else
    n=$1
    shift
    (>&2 echo err: $@)
  fi
  exit $n;
}

: <<='cut'
=pod

=head2 DELETE

rs_utils <options> B<delete> <cas_ids>

B<rs_utils delete> deletes (faux deletes) a user from an active configuration.
The user is not really deleted, instead all the types that are associated with
the user are deleted.  This elminates them from people part of the repository.

=cut

function drop () {

  local sel="${G[util_xmlstarlet]} sel -N a=http://www.w3.org/2005/Atom"
  local ed="${G[util_xmlstarlet]} ed -N a=http://www.w3.org/2005/Atom"
  local cdir=${G[base]}/${G[configuration]}
  local ddir=${cdir}/data/sparql/deletions

#  local get
  read -r -d '' get <<'GET';
PREFIX rdf: <http://www.w3.org/1999/02/22-rdf-syntax-ns#>
PREFIX experts: <http://experts.library.ucdavis.edu/individual/>
SELECT ?g ?u ?p ?t
WHERE {
  { graph ?g {
      bind (expert:${u} as ?u)
      bind (rdf:type as ?p)
      ?u ?p ?t
    }
   }
};
GET

local drop;
read -r -d '' drop <<'DROP';
PREFIX rdf: <http://www.w3.org/1999/02/22-rdf-syntax-ns#>
DELETE { graph ?g { ?u ?p ?t. } }
WHERE {
  { graph ?g {
      bind (<http://experts.library.ucdavis.edu/individual/${u}> as ?u)
      bind (rdf:type as ?p)
      ?u ?p ?t
    }
   }
}
DROP

  [[ ! -d $cdir ]] && err 1 $cdir not found

  for u in "$@"; do
    [[ -d ${ddir} ]] || mkdir -p ${ddir};
    eval "echo \"${get}\"" > ${ddir}/$u.save;
    eval "echo \"${drop}\"" > ${ddir}/$u.sqarql;
    ${G[docker-compose]} -p ${G[configuration]} -f ${ddir}/${G[configuation]}.yml exec harvest "http
    log rm $u
  done
}

: <<=cut

=head1 DEPENDANCIES

rs_utils uses a number of external bash commands. These must be installed for
the elements script to work. These commands include httpie, xmlstarlet, and

=over 4

=item L<docker-compose|https://docs.docker.com/compose/>

All research-profile configurations are run through docker-compose
configurations. These configuations are what are used to

=item L<getopt>

Some applications do not use ${FLAGS_GETOPT_CMD:-getopt}

=back

=head1 AUTHOR

Quinn Hart <qjhart@ucdavis.edu>

=cut

#MAIN

# global Variables
declare -g -A G=(
  [noop]=''
  [http_ssl]="tls1.2"
  [http_print]="b"
  [http_session]="elements"
  [base]="/home/quinn/research-profiles/configurations"
  [util_docker_compose]="docker-compose"
);

OPTS=();
while true; do
	case $1 in
	  -*) OPTS+=($1); shift ;;
	  -- ) shift; break;;
	  *) break;
	esac
done

# Allow getopt to be somewhere else
GETOPT=${FLAGS_GETOPT_CMD:-getopt}

init "${OPTS[@]}"

[[ -n ${G[configuration]} ]] || { >&2 echo -e "No --configuration parameter specified\n"; exec pod2usage -exit 1 $0; }

main.cmd "$@"

exit 0;

#! /usr/bin/env bash

: <<=cut
=pod

=head1  NAME

elements - Harvest an Elements feed.

=head1 SYNOPSIS

elements [--api=<elements_endpoint>] [-S|--session=<httpie session>] \
         [-b|--base=<base>] [-n|--dry-run] [-p|--print] [-h|--help]\
  <command> [<args>]

  where <command> is one of harvest

elements is a script the simplifies the retrieval of an elements feed API.
L</"COMMANDS"> is summary of the commands that are available.

=head1 GLOBAL OPTIONS

=over 4

=item B<--api=I<elements_endpoint>>

This is the http address for the elements endpoint.

=item B<-S|--session|--http_session=I<http_session>>

Set the HTTPIE session variable. It is equivalent to the
L<httpie|https://httpie.org/> session variable, and are shared in that command
configuration. Sessions primarily keep the basic authentication parameters
saved. By default the B<elements> session is used.

=item B<-b|--base = directory>

Specify the base directory for your feed results, default C<base=./>. Under this
directory, we have temporary C<feed> directory holding the individual calls
to the elements backend, and C<raw-records> which stores the XML files for the
individual records. Under C<raw-records> are C<users>,C<relationships>, C<groups>


=item B<-n|--dry-run>

Show what you would do do not really do it. Because some commands require
multiple access to the server, this command does not always work properly :(.

=item B<-h|--help>

Shows the manpage for the program. The help pages are embedded in the script and
require the functions, C<pod2usage> and C<pod2text> to work properly.

=back

=cut

function _parse_yaml() {
  local prefix=$2
  local s='[[:space:]]*' w='[a-zA-Z0-9_]*' fs=$(echo @|tr @ '\034')
  sed -ne "s|^\($s\)\($w\)$s:$s\"\(.*\)\"$s\$|\1$fs\2$fs\3|p" \
      -e "s|^\($s\)\($w\)$s:$s\(.*\)$s\$|\1$fs\2$fs\3|p"  $1 |
    awk -F$fs '{
      indent = length($1)/2;
      vname[indent] = $2;
      for (i in vname) {if (i > indent) {delete vname[i]}}
      if (length($3) > 0) {
         vn=""; for (i=0; i<indent; i++) {vn=(vn)(vname[i])("_")}
         printf("G[%s%s]=\"%s\"\n", vn, $2, $3);
      }
   }'
}

function init() {
    local opts=`$GETOPT -o A:bnhS:v --long verbose,base:,api:,http_session:,session:,dry-run,help -n 'elements' -- "$@"`
    if [ $? != 0 ] ; then echo "Bad Command Options." >&2 ; exit 1 ; fi

    eval set -- "$opts"

    declare -A CMD;
    while true; do
	    case $1 in
        -A | --api) CMD[api]=$2; shift 2;;
	      --session | --http_session) CMD[http_session]=$2;  shift 2;;
	      -b | --base) G[base]=$2;  shift 2;;
	      -v | --verbose) G[verbose]=1;  shift 2;;
	      -n | --dry-run) G[noop]=1; shift ;;
	      --print | --http_print) CMD[http_print]=$2; shift 2;;
        -h | --help ) exec pod2text $0;;
	      -- ) shift; break;;
	      *) shift; break;
      esac
    done

    # Read the configuration file
    config=${G[base]}/elements.yml
    if [[ -f $config ]]; then
      eval $(_parse_yaml "$config")
    fi

    # COMMAND LINE FOR THESE OVER YAML file
    for i in http_session http_print; do
      [[ -n ${CMD[$i]} ]] && G[$i]=${CMD[$i]};
    done

}



: <<='cut'

=pod

=head1 COMMANDS

Next there are a set of commands that communicate with the CDL service. Note,
that ezid uses L<httpie|https://httpie.org/> for its http communcation. This
allows users to combine ezid with other httpie requests if required. Login
infomation is stored using the standard C<httpie> methodology, see L</"GLOBAL OPTIONS"> for httpid options.

C<elements [options] harvest --full> Harvests a number of feeds from the
Elements database and stores each record in a separate file.  This is to match how
the Sympletic Harvester works

=cut

function main.cmd () {
    cmd=$1
    shift;
    case $cmd in
	    get | login | feed) # API requests
	      $cmd "$@";
	      ;;
	    group.sub | group.membership ) # group commands
	      $cmd "$@";
	      ;;
	    feed.split ) # harvest requests
	      $cmd "$@";
	      ;;
      declare ) # informational requests
        _${cmd} "$@";
        ;;
	    *)
	      exec pod2usage $0
	  ;;
    esac
}


function log() {
  [[ -n ${G[verbose]} ]] && (>&2 echo LOG: $@)
}

# # log_run was an idea, but I decided it was too complicated to use with pipes (as I at least tried below)
# function log_run() {
#   local OPTS=();
#   while true; do
# 	  case $1 in
# 	    -*) OPTS+=($1); shift ;;
# 	    -- ) shift; break;;
# 	    *) break;
# 	  esac
#   done

#   local opts=`$GETOPT --long stdin:,stdout:,level:,run -n 'elements log_run' -- fake_cmd "${OPTS[@]}"`
#   if [ $? != 0 ] ; then echo "Bad Command Options." >&2 ; exit 1 ; fi

#   eval set -- "$opts" "$@"

#   local stdin=
#   local stdout=
#   local run=
#   while true; do
# 	  case $1 in
#       --level ) level=$2; shift 2;;
#       --stdin ) stdin=$2; shift 2;;
#       --stdout ) stdout=$2; shift 2;;
#       --run ) run=1; shift ;;
# 	    -- ) shift; break;;
# 	    *) shift; break;
#     esac
#   done

#   local LOG=LOG;
#   [[ -n $run ]] && LOG=RUN;

#   if [[ -n $stdout && -n $stdin ]]; then
#       [[ -n ${G[verbose]} ]] && (>&2 echo RUN: "$@" "<$stdin" ">$stdout")
#       [[ -n $run ]] && ($@ < $stdin > $stdout)
#   elif [[ -n $stdout && -z $stdin ]]; then
#     [[ -n ${G[verbose]} ]] && (>&2 echo RUN: "$@" ">$stdout")
#     [[ -n $run ]] && ("$@" > "$stdout")
#   elif [[ -n $stdin && -z $stdout ]]; then
#     [[ -n ${G[verbose]} ]] && (>&2 echo RUN: "$@" "<$stdin")
#     [[ -n $run ]] && ($@ < $stdin)
#   else
#     [[ -n ${G[verbose]} ]] && (>&2 echo RUN: "$@")
#     [[ -n $run ]] && ($@)
#   fi
# }

function err() {
  local n=1;
  if [[ $1 = '--quiet' ]] ; then
    n=$2;
  else
    n=$1
    shift
    (>&2 echo err: $@)
  fi
  exit $n;
}

: <<='cut'
=pod

=head2 FEED.SPLIT

elements I<options> B<feed.split> [--cats=I<columns>]

B<elements feed.split> splits a set of feeded files for a category into
a individual files for each record.

=head3 FETCTH.SPLIT OPTIONS

=over 4

=item B<--cats=I<cats>>

Specify the catagories to split,

=back

=cut

function feed.split () {
  local opts=`$GETOPT -o i --long items -n 'elements feed.split' -- "$@"`
  if [ $? != 0 ] ; then echo "Bad Command Options." >&2 ; exit 1 ; fi

  eval set -- "$opts"

  local cats=()
  local in_cats=()
  local c
  local t
  local tmp=()

  declare -A sel_id=(
    [publications]='api:object/@id'
    [users]='api:object/@id'
    [relationships]='api:relationship/@id'
    [groups]='api:user-group/@id'
  );

  while true; do
	  case $1 in
	    -- ) shift; break;;
	    *) shift; break;
    esac
  done

  local sel="${G[util_xmlstarlet]} sel -N a=http://www.w3.org/2005/Atom"
  local ed="${G[util_xmlstarlet]} ed -N a=http://www.w3.org/2005/Atom"
  local fdir=${G[base]}/feed
  local raw=${G[base]}/raw-records

  for c in "$@"; do
    [[ -z ${sel_id[$c]} ]] && err 1 $c not a valid category
  done

  for c in "$@"; do
    local s=${c::-1}
    [[ -d ${fdir}/$s ]] && rm -r ${fdir}/$s;
    mkdir -p ${fdir}/$s;
    for f in ${fdir}/${c}.[0-9]*; do
      log $f
      if [[ -f $f ]]; then
        for id in $(${sel} -t -v '/a:feed/a:entry/'${sel_id[$c]} $f); do
          log "${sel} -D -t -c '/a:feed/a:entry['${sel_id[$c]}\"=${id}]\" $f | $ed -d '/a > $fdir/$s/$id"
          ${sel} -D -t -c '/a:feed/a:entry['${sel_id[$c]}"=${id}]" $f |\
            ${ed} -d '/a:entry/a:*' > $fdir/$s/$id
         done
      fi
    done
    log ${G[util_rsync]} -r --delete $fdir/$s/ $raw/$s
    ${G[util_rsync]} -r --delete $fdir/$s/ $raw/$s
    log rm -r $fdir/$s
    rm -r $fdir/$s
  done
}

:<<=cut

=head2 GROUP.SUB

  elements group.sub <--feed_groups=I<groups>> <--children> <--parents> groups.xml
  B<elements group.sub> command reads in a group feed, and sub-selects out the
  groups associated with the passed C<--feed_groups> parameter.  Both C<--children> and C<--parents> can be included.  The hierarchi y is adjusted so the file is self-consistent.

=head3 GROUP.SUB OPTIONS

=over 4

=item B<--feed_groups=I<groups>>

Specify the groups to sub select config default is C<feed:groups:>.  Inidividual groups can be comma seprated, or you can add multiple C<--feed_groups=> entries.

=item B<--parents>

Include all parents of the passed group

=item B<--children>

Include all children of the passed group.

=back

=cut

function group.sub() {
  local opts=`$GETOPT -o o:g:pcf: --long output:,feed_groups:,parents,children,format: -n 'elements getParent' -- "$@"`
  if [ $? != 0 ] ; then echo "Bad Command Options." >&2 ; exit 1 ; fi

  eval set -- "$opts"

  local sel="${G[util_xmlstarlet]} sel -N a=http://www.w3.org/2005/Atom"
  local ed="${G[util_xmlstarlet]} ed -O -N a=http://www.w3.org/2005/Atom"
  local feed_groups=();
  local ids=();
  local parents=;
  local children=;
  local format=feed;
  local output=/dev/stdout
  while true; do
	  case $1 in
      -o | --output ) output=$2; shift 2;;
      -f | --format ) format=$2; shift 2;;
      -g | --feed_groups ) feed_groups+=("$2"); shift 2;;
      -p | --parents ) parents='--parents'; shift;;
      -c | --children ) children='--children'; shift;;
	    -- ) shift; break;;
	    *) shift; break;
    esac
  done

  local file=$1;
  local fmt;

  # Convert --feed_groups to id list.
  if [[ ${#feed_groups[@]} == 0 ]]; then
    feed_groups=(${G[feed_groups]})
  fi
  for i in ${feed_groups[@]}; do
    local add_groups=();
    IFS=',' read -ra add_groups <<<"$i"
    ids+=("${add_groups[@]}")
  done
  local id_list=$(printf ",%s" "${ids[@]}" | sed -e 's/^,//')

  # We want to get a list all the ids needed

  fmt="$fmt $(${sel} -t -v "/a:feed/a:entry/api:user-group[@id=${id}]/@id" ${file})"

  if [[ $parents ]] ; then
    local cid=$id
    local pid=$(${sel} -t -v "//a:entry/api:user-group[api:children/api:child/@id=${cid}]/@id" ${file})
    while [[ -n $pid ]]; do
      if [[ $format == "ids" ]]; then
        fmt="$fmt ${pid}"
        cid=$pid;
        pid=$(${sel} -t -v "//a:entry/api:user-group[api:children/api:child/@id=${pid}]/@id" ${file})
    done
  fi

  // recursively call this for children
  if [[ $children ]] ; then
    local pid=$id
    local cid;
    for cid in $(${sel} -t -v "//a:entry/api:user-group[@id=${pid}]/api:children/api:child/@id" ${file}); do
      fmt="$fmt $(group.sub --format=ids --children --feed_groups=$cid ${file})"
    done
  fi


    log group.sub --format=ids $parents $children --feed_groups=${id_list} $file
    id_list=$(group.sub --format=ids $parents $children --feed_groups=${id_list} $file | tr ' ' '\n' | sort -u )
    ids=($id_list)
    log "ids=${ids[@]}"
  fi

  log "id_list=${id_list}"

  if [[ -z $file ]]; then
    echo
    err 1 "No file specified"
  fi

  # Copy original feed data if exists.
  if [[ $format ==  "feed" ]]; then
    fmt=$(${ed} -d "//a:entry" ${file} | sed -e 's|</feed>||')
  fi

  local id
  for id in "${ids[@]}"; do
    if [[ $format == "ids" ]]; then
      log ${sel} -t -v "//a:entry[api:user-group/[@id=${id}]/@id" ${file}
      fmt="$fmt $(${sel} -t -v "/a:feed/a:entry/api:user-group[@id=${id}]/@id" ${file})"
    else
      log ${sel} -t -c '//a:entry[api:user-group/@id=${id}]' ${file}
      fmt="$fmt $(${sel} -t -c "/a:feed/a:entry[api:user-group/@id=${id}]" ${file})"
    fi

    if [[ $parents ]] ; then
      local cid=$id
      local pid=$(${sel} -t -v "//a:entry/api:user-group[api:children/api:child/@id=${cid}]/@id" ${file})
      while [[ -n $pid ]]; do
        if [[ $format == "ids" ]]; then
          fmt="$fmt ${pid}"
        else
          log ${sel} -t -c "//a:entry[api:user-group/@id=${pid}]" ${file} | ${ed} -d "//api:child[@id != ${cid}]"
          fmt="$fmt $(${sel} -t -c "//a:entry[api:user-group/@id=${pid}]" ${file} | ${ed} -d "//api:child[@id != ${cid}]")"
        fi
        cid=$pid;
        pid=$(${sel} -t -v "//a:entry/api:user-group[api:children/api:child/@id=${pid}]/@id" ${file})
      done
    fi

    if [[ $children ]] ; then
      local pid=$id
      local cid;
      for cid in $(${sel} -t -v "//a:entry/api:user-group[@id=${pid}]/api:children/api:child/@id" ${file}); do
        if [[ $format == "ids" ]]; then
          fmt="$fmt $(group.sub --format=ids --children --feed_groups=$cid ${file})"
        else
          fmt="$fmt $(group.sub --format=xml --children --feed_groups=$cid ${file})"
        fi
      done
    fi
  done
  if [[ $format == "feed" ]]; then
    fmt+="</feed>"
  fi
  echo ${fmt} > ${output}
}


:<<=cut

=head2 LOGIN

  elements login --auth=USER[:PASS]

B<elements login> is a simple wrapper around the B<httpie --auth=USER:PASS> command.
This allows users to setup their basic authorization, which is then stored in
the standard httpie session paratmeters. It is possible to maintain multiple users,
via the elements I<--session> parameter to maintain different users, eg.

  elements --session=ucd --auth=ucd

After which the session C<ucd>, will be set as a new httpie session, with
the saved authorization.

=head3 LOGIN OPTIONS

=over 4

=item B<-a|--auth=USER[:PASS]>

You specify the basic authentication for the ezid.cdlib.org server. If you only
specify the USER, then you are prompted for the password.

=back

=cut

function login() {
    local opts=`$GETOPT -o a --long auth: -n 'ezid login' -- "$@"`
    if [ $? != 0 ] ; then echo "Bad Command Options." >&2 ; exit 1 ; fi

    eval set -- "$opts"

    local auth=

    while true; do
	    case $1 in
        -a | --auth ) auth=$2; shift 2;;
	      -- ) shift; break;;
	      *) shift; break;
      esac
    done
   _http --auth=${auth} ${G[api]}
}

:<<=cut

=head2 FEED

  elements <global-elements> feed [--groups=<groups>] [-n|--no-run] cats cats

B<elements feed> uses the ATOM feed api to retreive all categories from the
elements database. The function saves each chunk of the category and follows the
c<next> parameter until completed.  The files are saved to the C<feed> directory.

possible categories are c<groups>,c<users>,c<publications>,c<relationships>

=head3 GET OPTIONS

=over 4

=item B<-n|--no-run>

Do not actually run the command.

=back

= Special Considerations

The c<group> feed is handled in two stages. The elements API has no groups
subselection for the system groups. This function creates a sub-graph of the
feed based on the specified group. It does this by saving the elements groups to
c<feed/groups.xml> and then creating a subgraph (using <group.sub> with all
parents of the selected <graph> and all the children. This is saved to
C<feeds/graph.000>

The c<users> and c<publications> calls are made using explicit membership calls
for the specified group, and the children. This is two build explicit membership
of these categories.

=cut

function feed () {
  local opts=`$GETOPT -o ng:u: --long no-run,groups:,detail:,users: -n 'elements feed' -- "$@"`
  if [ $? != 0 ] ; then echo "Bad Command Options." >&2 ; exit 1 ; fi

  eval set -- "$opts"

  local run='--run'
  local users=${G[feed_users]}
  local groups=${G[feed_groups]}
  local detail=${G[feed_detail]}
  while true; do
	  case $1 in
      -g | --groups ) groups=$2; shift 2;;
      -u | --users ) ids=$2; shift 2;;
      -d | --detail ) detail=$2; shift 2;;
      -n | --no-run ) run=; shift ;;
	    -- ) shift; break;;
	    *) shift; break;
    esac
  done

  local http="${G[util_http]} --check-status --session=${G[http_session]} --print=b "
  local cats;
  local g n N uf;
  local fdir=${G[base]}/feed
  local groups_xml=$fdir/groups.xml
  local groups_000=$fdir/groups.000

  local selT="${G[util_xmlstarlet]} sel -T -N a=http://www.w3.org/2005/Atom"

  while [[ -n $1 ]]; do
    let n=0;
    case $1 in
      groups )
        if [[ ${run} ]]; then
          ${http} ${G[api]}/groups > ${groups_xml}
          group.sub --format=feed --feed_groups=${groups} --parents --children ${groups_xml} > ${groups_000}
        fi
        log ${http} ${G[api]}/groups ">" ${groups_xml}
        log group.sub --format=feed --feed_groups=${groups} --parents --children ${groups_xml} ">" ${groups_000}
        shift;;
      users | publications )
        cats=$1;
        if [[ ${groups} ]] ; then
          [[ -f ${groups_000} ]] || err 1 "${groups_000} file missing. elements feed groups --group=${group}"
          log group.sub --format=ids --children --feed_groups=${groups} ${groups_000}
          for g in $(group.sub --format=ids --children --feed_groups=${groups} ${groups_000}) ; do
            next="${G[api]}/${cats}?group-membership=explicit&groups=${g}&detail=$detail"
            let n=0;
            while [[ -n ${next} ]]; do
              printf -v N "%03d" $n
              fn=${fdir}/${cats}.${g}.${N};
              log "${http} '${next}' > ${fn}"
              ${http} "${next}" > ${fn};
              log next=$(${selT} -t -v '//api:page[@position="next"]/@href' ${fn})
              next=$(${selT} -t -v '//api:page[@position="next"]/@href' ${fn});
              let n+=1;
            done
          done
        fi;
        if [[ ${cats}=='users' && ${users} ]]; then
          next="${G[api]}/${cats}?ids=${users}&detail=$detail"
          let n=0;
          while [[ -n ${next} ]]; do
            printf -v N "%03d" $n
            fn=${fdir}/${cats}.000.${N};
            log "${http} '${next}' > ${fn}"
            ${http} "${next}" > ${fn};
            log next=$(${selT} -t -v '//api:page[@position="next"]/@href' ${fn})
            next=$(${selT} -t -v '//api:page[@position="next"]/@href' ${fn});
            let n+=1;
          done
        fi
        shift;;
      # Relationships are different, because we need to get those on a per-user level,
      # not via groups.
      user-relationships )
        cats=$1;
        for uf in $fdir/users.; do
          for id in $($selT -t -v '/a:feed/a:entry/api:object/@id' $uf); do
            next="${G[api]}/relationships?involving=user($id)&detail=ref"
            log $uf $id $next
            let n=0;
            while [[ -n ${next} ]]; do
              printf -v N "%03d" $n
              fn=${fdir}/user-relationships.${id}.${N};
              log "${http} '${next}' > ${fn}"
              ${http} "${next}" > ${fn};
              # Now get relationships with both directions
#              ids=$($selT -t -v /a:feed/a:entry/api:relationship/@id ${fn} | paste -sd ',' )
#              log ${http} "${G[api]}/relationships?ids=${ids}&detail=ref"
              log next=$(${selT} -t -v '//api:page[@position="next"]/@href' ${fn})
              next=$(${selT} -t -v '//api:page[@position="next"]/@href' ${fn});
              let n+=1;
            done
          done
        done
        shift;;
      relationships)
        for fn in $fdir/user-relationships.*; do
          local tfn=$(echo $fn | sed -e 's/user-relationships/relationships/')
          ids=$($selT -t -v /a:feed/a:entry/api:relationship/@id ${fn} | paste -sd ',' )
          if [[ -n $ids ]] ; then
            log ${http} "${G[api]}/relationships?ids=${ids}&detail=ref" '>' ${tfn}
#            ${http} "${G[api]}/relationships?ids=${ids}&detail=ref" > ${tfn}
          fi
        done
        shift;;
      *)
        err 1 $1 is not a valid category
    esac
  done

}

:<<=cut

=head2 GET

  elements get [-n|--noop] function [[parm==val1 parm2==val2]]

B<elements get> is a simple wrapper around the B<httpie GET> command.
This allows users to setup their basic authorization, which is then stored in
the standard httpie session paratmeters. It is possible to maintain multiple users,
via the elements I<--session> parameter to maintain different users, eg.

  elements get users

=head3 GET OPTIONS

=over 4

=item B<-n|--no-run>

Do not actually run the command.

=back

=cut

function get () {
  local opts=`$GETOPT -o n --long no-run -n 'elements get' -- "$@"`
  if [ $? != 0 ] ; then echo "Bad Command Options." >&2 ; exit 1 ; fi

  eval set -- "$opts"

  local no_run=''
  while true; do
	  case $1 in
      -n | --no-run ) no_run=1; shift ;;
	    -- ) shift; break;;
	    *) shift; break;
    esac
  done

  local http="http --check-status --session=${G[http_session]} --print=b ${G[api]}"
  local func=$1;
  shift

  log $http/$func "$@"
  if [[ -z $no_run ]]; then
    $http/$func "$@"
  fi
}


function encode() {
  # urlencode <string>
  old_lc_collate=$LC_COLLATE
  LC_COLLATE=C

  local length="${#1}"
  for (( i = 0; i < length; i++ )); do
    local c="${1:i:1}"
    case $c in
      [%:$'\n'$'\r'] ) printf '%%%02X' "'$c" ;;
      * ) printf "$c" ;;
# THis is URL encoding
#      [a-zA-Z0-9.~_-]) printf "$c" ;;   # This is URL encoding
#      *) printf '%%%02X' "'$c" ;;
esac
done

  LC_COLLATE=$old_lc_collate
}

function decode() {
  # urldecode <string>

  local url_encoded="${1//+/ }"
  printf '%b' "${url_encoded//%/\\x}"
}

: <<='cut'
=pod

=head1 DEPENDANCIES

Elements uses a number of external bash commands. These must be installed for
the elements script to work. These commands include httpie, xmlstarlet, and

=over 4

=item L<httpie|https://httpie.org/>

httpie is a command-line tool similar to B<curl>. Since we only really need the
authentication, it may be better to use curl here and the .netrc file instead.
It is nice to have the httpie interface however, for debugging.

=item L<xmlstarlet|http://xmlstar.sourceforge.net/>

xmlstarlet is a simplfied method to perform xslt transforms to XML documents on
the command-line.  The syntax is more concise the the XSLT transforms.

=item L<xmllint>

xmllint is simply used to format the output from elements, and verify that it's
okay. Since we are often looking at the intermediate files, it's nice to have
them formatted.

=item L<getopt>

${FLAGS_GETOPT_CMD:-getopt}

=back

=head1 AUTHOR

Quinn Hart <qjhart@ucdavis.edu>

=cut


#MAIN
# global Variables
declare -A G=(
  [noop]=''
  [http_ssl]="tls1.2"
  [http_print]="b"
  [http_session]="elements"
  [base]="."
  [util_rsync]="rsync"
  [util_xmlstarlet]="xmlstarlet"
  [util_http]="http"
  [feed_detail]="full"
);

OPTS=();
while true; do
	case $1 in
	  -*) OPTS+=($1); shift ;;
	  -- ) shift; break;;
	  *) break;
	esac
done

# Allow getopt to be somewhere else
GETOPT=${FLAGS_GETOPT_CMD:-getopt}

init $OPTS
main.cmd "$@"

exit 0;
